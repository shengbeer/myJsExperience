变量名的命名：
js中可以不用声明变量直接使用，赋值会自动将该变量声明；但我们在使用时，提前声明变量是一个良好的编程习惯。
变量的命名规则：JS语法规则不允许变量名中包含字母，数字，美元符号和下划线（但第一个字符不允许是数字）。另一种是使用驼峰格式即：第一个单词小写后面的每个新单词改用大写字母开头。但驼峰格式通常是函数名，方法名和对象属性名命名的首选格式。
变量的命名使用：var +变量名。变量名的命名一般是在第一个单词和第二个单词之间使用下划线隔开以方便阅读。可一次声明多个变量甚至可以将声明和赋值一步完成。


函数的命名规则：
在javascript中使用关键字function来创建函数，具体的方法是：function+函数名（参数）{}这种方式来命名；函数名一般使用驼峰格式来进行命名即第一个单词小写后面新单词的首字母大写；像骆驼的驼峰一样。


javascript的数据类型
1.字符串
由零个或多个字符构成，但最好根据字符串所包含的字符来选择，如果字符串包含双引号就把整个字符串放在单引号里；如果字符串包含单引号，就把整个字符串放在双引号里。在整个脚本中字符串使用单，双引号的选择最好保持一致；方便开发和后端人员阅读和理解
2.数值
在javascript中如果想给一个变量赋一个数值，不用限定它必须是一个整数。javascript允许使用带小数点的数值，并且允许人以为小数―即浮点数，使用负数时在数值前加上一个减号即可表示它是一个负数，同样也支持负数浮点数
3.布尔值
true或false
4.数组
字符串，数值和布尔值都是标量（即在任意时刻只能拥有一个值）如果想使用一个变量来存储一组值，急需要使用数组（Array）
在javaScript中使用关键字Array来声明数组，同时还可以指定数组初始元素个数-即数组的长度（length）：varbeatles=Array();
填充:
向数组中添加元素的操作称为填充，在填充数组时，需要给出新元素的值和在数组中的存放位置-即元素的下标（index）第一个下标的数字为0，下标需要用方括号括起来：
array[index]=element;
同样的数组也可以在声明的同时进行填充，要求将数组中的各个元素使用逗号隔开 如：var beatles =Array("john","paul")
数组元素不必非得是字符串，可以将布尔值，数值，变量，另一个数组的元素，其他的数组。甚至这几种数据类型混合放到数组中。

填充数组的方式：
关联数组：数组的下标不一定非得是数字甚至可以用字符串来代替数字，这样会让代码更具有可读性；但是这不是一个好习惯SO不推荐使用。
  本质上，在创建关联数组时，你创建的是Array对象的属性。在javaScript中，所有变量实际上都是某种类型的对象。如一个布尔值就是一个Boolean类型的对象，一个数组就是一个Array类型的对象，通用的对象为Object



存放数据的首选方式：是将数据保存为对象。
对象：与数组类似，对象也是使用一个名字表示一组值。对象的每个值叫做对象的一个属性。创建对象使用Object关键字，在对象中不使用方括号和下标来获取元素，而是想JavaScript内置的对象一样使用点号（・）来获取某个对象的属性（即它的值）。
创建对象的方法有：
1.常规法：与创建数组类似
例如：var lennon = object();
      lennon.name="john";
      lennon.year=1940;
      lennon.living=false;
2.花括号法：
{propertyName:value,propertyName:value}
上面的例子可改写为
var lennon = { name:"jhon",year:1940,living:false};
与数组类似的同样属性值可以是任何JavaScript值，包括其他对象。
对象与数组的区别：
用对象来代替传统数组的做法意味着可以通过元素的名字而不是下标数字来引用他们。这大大提高了脚本的可读性。
下面的例子将创建一个beatles数组并使用lenno对象来填充它的第一个元素
var beatles = Array();
beatles[0]=lennon; 
我们不能使用beatles[0][0]而是使用beatles[0].name得到值"jhon";




-------操作-----
算数操作符：
+ - * /
赋值：=
为避免歧义可使用括号将不同的操作符隔开
如果想给一个数值类型的变量加上1可以使用：++
...........................减1操作：--
加号（+）即可作为算数运算符也可以用于字符串表示拼接
将一个字符串和一个数值拼接的结果是字符串
+=：完成一次“加法和赋值”（拼接或赋值）



条件语句（conditional statement）
if语句
基本语法：if(conditional){
             statements;
             }
在if语句中条件必须放在if后面的圆括号中。条件的求值结果永远是一个布尔值，即只能是true或false。花括号中的语句只有当给定条件的求值结果为true的情况下才会执行。如果在if语句中花括号里面只包含一条语句可以将所有语句写在同一行上。
不足之处是无法完成重复性的操作。



比较操作符
大于（>）小于(<) 大于或等于(>=) 小于或等于(<=)
等于：==
不等于：！=
严格等于：===
严格不等于：！==
如果要严格进行比较是否相等就使用(===)这个比较操作符不仅比较值还比较变量的类型。只有两者都满足才会返回true


逻辑操作符
逻辑操作符的对象是布尔值。每个逻辑操作数返回一个布尔值
逻辑与：&&     两个逻辑操作数都为true才会返回true
逻辑或：||     只要有一个逻辑操作数为true就会返回true
逻辑非：！     只能用于单个逻辑操作数，将逻辑操作数所返回的值取反


循环语句
只要给定条件能够得到满足，包含在循环语句中的代码将重复的执行下去
1.while循环
语法：
while(conditional)
{
statements;
}

2.do...while循环
do
{
statements;
}while(conditional);

do...while循环和while循环的区别是如果条件不满足即返回结果的值不为true时，while循环一次都不会执行而do.....while循环却至少会执行一次。这是由他们的语法规则决定。


3.for循环
for（initial conditional;test conditional;alert condition）{
           statements;
}
for循环的好处是循环控制结构会更加清晰，最常见的用途之一是对某个数组里的全体元素进行遍历处理。往往需要用到数组的length属性



-------函数------
多次使用同一段代码，就可以把它们封装成一个函数（function）它是一组允许在你的代码里随时调用的语句。事实上，每个函数实际上是一个短小的脚本。
在使用函数时应遵循和使用变量相类似的原则：即先对他们进行定义再调用他们。当我们需要反复做一件事时，都可以利用函数来避免重复键入大量的相同内容，不过函数的真正威力体现在，你可以把不同的数据传递给函数，函数将使用这些数据去完成预定的操作，传递给函数的数据称为参数（argument）.
定义一个函数的语法：
   function name(arguments){
    statements;
}
函数不仅能够（以参数的形式）接收数据，还能够返回数据。但函数的真正价值体现在，我们可以将函数当做一种数据类型来使用，这意味着我们可以将函数调用结果赋给一个变量，函数的命名遵循驼峰格式


变量的作用域：
全局变量：可以再脚本的任意位置被引用
局部变量：只存在于声明它的那个函数的内部，在函数的外部无法引用。局部变量的作用域仅限于摸个特定的函数。
为函数变量设定作用域：var关键字（局部变量）
如果某个函数中使用了var，那么这个变量将被视为一个局部变量，它只存在于这个函数的上下文中；反之，如果没有使用var关键字则被视为全局变量，当脚本中以及存在一个与之同名的全局变量，这个函数就会改变那个全局变量的值。
在定义一个函数时，我们一定要把它内部的变量全都明确地声明为局部变量；这样能避免任何形式的二义性隐患。


--------对象------
对象是一种非常重要的数据类型，对象是自包含的数据集合，包含在对象中的数据可以通过两种形式访问-属性（property）和方法(method)
*属性是隶属于某个特定对象的变量
如：有一个对象的名字是person，它有mood和age等变量
使用它们应遵循以下方法：
person.mood
person.age
*方法是只有某个特定对象才能调用的函数 
对象就是由一些属性和方法组合在一起而构成的一个数据实体
实例是对象的具体个体，为给定对象创建一个新实例需要使用new关键字
JavaScript中提供的一系列预先定义好的对象，我们可以直接拿来用的叫做“内建对象（native object）”,JavaScript脚本李世勇一些预先定义好的其他对象，这些对象不是JavaScript语言本身而是由它的运行环境提供的。具体到WEB应用就是浏览器。由浏览器提供的预定义对象称为宿主对象（host object）。同样的用户也可以自定义对象，这种对象叫做用户定义对象。


DOM标准由W3C组织提供
D代表的是文档(document),当我们创建了一个网页并把它加载到web浏览器中时，他将会把我们编写的网页文档转换为一个文档对象。
O代表的对象（object）对象是一个自足的数据集合，与某个特定对象相关联的变量被称为这个对象的属性；只能通过某个特定对象去调用的函数被称为这个对象的方法。
对象可分为三种类型：
用户自定义对象（user-defined object）
内建对象（native object）
宿主对象：（host object）由浏览器提供的对象。
M代表着“model”（模型）代表的是某种事物的表现形式。
DOM把一份文档表示为一棵家谱树（节点树）
家谱树模型适合用来表示用（X）HTML语言编写出来的文档

节点（node）：文档是由节点构成的集合，节点是文档树上的树枝和树叶
最主要的节点类型：元素节点（element node）DOM的“原子”如：</body>,<p>,<li>,<ul>等节点树的根元素是</html>元素。
文本节点（text node）：文本节点通常被包含在元素节点的内部，里面显示的通常是内容。
属性节点（attribute node）：属性节点用来对元素做更具体的描述，因为属性总是被放在起始标签里，所以属性节点总是被包含在元素节点中。并非所有的元素都包含着属性，但所有的属性都被元素包含。

DOM获取元素节点的三种方法：
1.getElementById(通过ID来获取元素节点)
getElementById方法只有一个参数，这个调用将返回一个对象，这个对象对应着document对象里的独一无二的元素。
*typeof操作符可以告诉我们它的操作数是什么类型。
2.getElementsByTagName（通过元素的标签名来获取元素）
这个方法将返回一个对象数组，每个对象分别对应着文档里有着给定标签的一个元素。
3.getElementsByClassName（通过class属性中的类名来访问元素）
这个方法也将返回一个具有相同类名的元素的数组，只能接受类名作为参数；可以有多个类名，中间用空格分隔类名。

获取和设置属性
1.getAttribute（获取属性）
这个函数的参数为你打算查询属性的名字，它不属于document对象，所以不能通过document对象调用；只能通过元素节点对象调用。例如，可以与getElementsByTagName方法合用。
2.setAttribute（设置属性）
允许我们队属性节点的值做出修改，只能用于元素节点。需要注意的是：通过该方法对文档做出修改后，在通过浏览器查看源代码选项去查看文档的源代码时看到的仍将是修改前的属性值。这种“表里不一”的现象源自DOM的工作模式：先加载文档的静态内容，再动态刷新，动态刷新不影响文档的静态内容。这正是DOM的真正威力：对页面内容进行刷新却不需要在浏览器里刷新页面.


  








